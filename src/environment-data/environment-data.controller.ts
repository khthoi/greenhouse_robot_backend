import { 
  Controller,
  Get,
  Post,
  Body,
  Param,
  Patch,
  Delete,
} from '@nestjs/common';
import { EnvironmentDataService } from './environment-data.service';
import { CreateEnvironmentDataDto } from './environment-data.dto';
import { EnvironmentData } from './entities/environment-data.entity';

@Controller('environment-data')
export class EnvironmentDataController {
  constructor(private readonly envDataService: EnvironmentDataService) {}

  /**
   * üü¢ T·∫°o m·ªõi b·∫£n ghi d·ªØ li·ªáu m√¥i tr∆∞·ªùng
   * POST /environment-data
   */
  @Post()
  async create(@Body() dto: CreateEnvironmentDataDto): Promise<EnvironmentData> {
    return await this.envDataService.create(dto);
  }

  /**
   * üü° L·∫•y to√†n b·ªô d·ªØ li·ªáu m√¥i tr∆∞·ªùng
   * GET /environment-data
   */
  @Get()
  async findAll(): Promise<EnvironmentData[]> {
    return await this.envDataService.findAll();
  }

  /**
   * üü¢ L·∫•y d·ªØ li·ªáu theo ID
   * GET /environment-data/:id
   */
  @Get(':id')
  async findOne(@Param('id') id: number): Promise<EnvironmentData> {
    return await this.envDataService.findOne(id);
  }

  /**
   * üü£ L·∫•y d·ªØ li·ªáu theo RFID Tag ID
   * GET /environment-data/by-rfid/:rfid_tag_id
   */
  @Get('by-rfid/:rfid_tag_id')
  async findByRfidTag(@Param('rfid_tag_id') rfid_tag_id: string): Promise<EnvironmentData[]> {
    return await this.envDataService.findByRfidTagId(rfid_tag_id);
  }

  /**
   * üü† C·∫≠p nh·∫≠t b·∫£n ghi m√¥i tr∆∞·ªùng
   * PATCH /environment-data/:id
   */
  @Patch(':id')
  async update(
    @Param('id') id: number,
    @Body() partial: Partial<EnvironmentData>,
  ): Promise<EnvironmentData> {
    return await this.envDataService.update(id, partial);
  }

  /**
   * üî¥ X√≥a b·∫£n ghi m√¥i tr∆∞·ªùng
   * DELETE /environment-data/:id
   */
  @Delete(':id')
  async remove(@Param('id') id: number): Promise<{ message: string }> {
    await this.envDataService.remove(id);
    return { message: 'X√≥a d·ªØ li·ªáu m√¥i tr∆∞·ªùng th√†nh c√¥ng' };
  }
}
